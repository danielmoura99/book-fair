// lib/station-storage.ts
"use client";

/**
 * Sistema de localStorage espec√≠fico por esta√ß√£o
 * Resolve conflitos entre m√∫ltiplas esta√ß√µes usando o mesmo sistema
 */

// Cache do nome da esta√ß√£o para evitar m√∫ltiplas leituras
let stationNameCache: string | null = null;

/**
 * Obt√©m o nome da esta√ß√£o atual
 */
function getStationName(): string {
  if (typeof window === "undefined") return "default";
  
  // Usar cache se dispon√≠vel
  if (stationNameCache) return stationNameCache;
  
  // Tentar obter do localStorage
  const savedName = localStorage.getItem("stationName");
  if (savedName) {
    stationNameCache = savedName;
    return savedName;
  }
  
  // Fallback para esta√ß√£o padr√£o
  const defaultName = "Estacao1";
  stationNameCache = defaultName;
  return defaultName;
}

/**
 * Gera chave √∫nica baseada na esta√ß√£o
 */
function getStationKey(baseKey: string): string {
  const stationName = getStationName();
  // Sanitizar nome da esta√ß√£o (remover espa√ßos e caracteres especiais)
  const sanitizedStation = stationName.replace(/[^a-zA-Z0-9]/g, "_");
  return `${baseKey}_${sanitizedStation}`;
}

/**
 * Obt√©m item do localStorage espec√≠fico da esta√ß√£o
 */
export function getStationItem(key: string): string | null {
  if (typeof window === "undefined") return null;
  
  const stationKey = getStationKey(key);
  const value = localStorage.getItem(stationKey);
  
  // Se n√£o encontrar com chave da esta√ß√£o, tentar migrar da chave antiga
  if (!value) {
    const oldValue = localStorage.getItem(key);
    if (oldValue) {
      // Migrar para nova chave
      localStorage.setItem(stationKey, oldValue);
      // Manter chave antiga por compatibilidade (n√£o remover ainda)
      console.log(`Migrated ${key} to ${stationKey}`);
      return oldValue;
    }
  }
  
  return value;
}

/**
 * Define item no localStorage espec√≠fico da esta√ß√£o
 */
export function setStationItem(key: string, value: string): void {
  if (typeof window === "undefined") return;
  
  const stationKey = getStationKey(key);
  localStorage.setItem(stationKey, value);
}

/**
 * Remove item do localStorage espec√≠fico da esta√ß√£o
 */
export function removeStationItem(key: string): void {
  if (typeof window === "undefined") return;
  
  const stationKey = getStationKey(key);
  localStorage.removeItem(stationKey);
}

/**
 * Limpa cache do nome da esta√ß√£o (usar quando esta√ß√£o for renomeada)
 */
export function clearStationNameCache(): void {
  stationNameCache = null;
}

/**
 * Debug: Lista todas as chaves relacionadas √† esta√ß√£o atual
 */
export function debugStationStorage(): void {
  if (typeof window === "undefined") return;
  
  const stationName = getStationName();
  const sanitizedStation = stationName.replace(/[^a-zA-Z0-9]/g, "_");
  
  console.log(`üè¢ Esta√ß√£o: ${stationName}`);
  console.log(`üîë Sufixo: ${sanitizedStation}`);
  
  const stationKeys: string[] = [];
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key && key.endsWith(`_${sanitizedStation}`)) {
      stationKeys.push(key);
    }
  }
  
  console.log(`üì¶ Chaves da esta√ß√£o:`, stationKeys);
}