generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  SALE
  EXCHANGE
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum InventoryLogType {
  CREATE
  UPDATE
  DELETE
}



model Book {
  id         String   @id @default(cuid())
  codFle     String   @unique // Código FLE
  barCode    String?  // Código de Barras (opcional)
  location   String   // Local
  quantity   Int      // Quantidade
  coverPrice Decimal  @db.Decimal(10, 2) // preço feira
  price      Decimal  @db.Decimal(10, 2) @default(0) // preço capa
  title      String   // Título
  author     String   // Autor
  medium     String   // Médium
  publisher  String   // Editora
  distributor String  // Dostribuidora
  subject    String   // Assunto
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  transactions Transaction[]
  
  @@index([title])
  @@index([author])
  @@index([publisher])
  @@index([subject])
  @@index([location])
  @@index([createdAt])
}

model Transaction {
  id              String    @id @default(cuid())
  sequentialId    Int       @unique @default(autoincrement())
  saleGroupId     String?
  bookId          String
  book            Book      @relation(fields: [bookId], references: [id])
  quantity        Int
  totalAmount     Decimal   @db.Decimal(10, 2)
  transactionDate DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  type            TransactionType @default(SALE)
  returnedBookId  String?
  priceDifference Decimal? @db.Decimal(10, 2)
  cashRegisterId  String?
  cashRegister    CashRegister? @relation(fields: [cashRegisterId], references: [id])
  operatorName    String
  payments        Payment[]    

  @@index([sequentialId])
  @@index([saleGroupId]) // NOVO ÍNDICE
}

model Operator {
  id        String   @id @default(cuid())
  name      String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CashRegister {
  id            String    @id @default(cuid())
  openingDate   DateTime
  closingDate   DateTime?
  initialAmount Decimal   @db.Decimal(10, 2)
  finalAmount   Decimal?  @db.Decimal(10, 2)
  status        CashRegisterStatus @default(OPEN)
  transactions  Transaction[]
  withdrawals   CashWithdrawal[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  notes         String?
  
}

model CashWithdrawal {
  id              String       @id @default(cuid())
  amount          Decimal      @db.Decimal(10, 2)
  reason          String
  operatorName    String 
  cashRegisterId  String
  cashRegister    CashRegister @relation(fields: [cashRegisterId], references: [id])
  createdAt       DateTime     @default(now())
}

model Payment {
  id            String   @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  method        String
  amount        Decimal  @db.Decimal(10, 2)
  amountReceived  Decimal?    @db.Decimal(10, 2) 
  change        Decimal? @db.Decimal(10, 2)  
  createdAt     DateTime @default(now())
}

model InventoryBook {
  id           String       @id @default(cuid())
  codFle       String       @unique // Código FLE
  barCode      String?      // Código de Barras (opcional)
  location     String       // Local
  quantity     Int          // Quantidade
  coverPrice   Decimal      @db.Decimal(10, 2) //preco feira
  price        Decimal      @db.Decimal(10, 2) @default(0) // preco capa
  title        String       // Título
  author       String       // Autor
  medium       String       // Médium
  publisher    String       // Editora
  distributor  String       // Distribuidora
  subject      String       // Assunto
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@index([title])
  @@index([author])
  @@index([publisher])
  @@index([distributor])
  @@index([subject])
  @@index([location])
  @@index([quantity])
  @@index([createdAt])
}

model InventoryLog {
  id           String          @id @default(cuid())
  type         InventoryLogType
  bookId       String
  bookCodFle   String
  bookTitle    String
  operatorName String?         // Nome da pessoa que realizou a ação
  previousData Json?           // Dados anteriores (para UPDATE)
  newData      Json            // Dados atuais/novos
  timestamp    DateTime        @default(now())
  notes        String?         // Observações adicionais
}
